[{"body":"WorkflowFM PEW is available as a library from Maven Central, so you can add it as a dependency in your project. For example, in sbt:\n1libraryDependencies += \u0026#34;com.workflowfm\u0026#34; %% \u0026#34;pew\u0026#34; % \u0026#34;1.6.1\u0026#34; PEW is currently only available in Scala 2.12.12.\n","link":"https://docs.workflowfm.com/pew/docs/getting-started/","title":"Getting Started"},{"body":"Welcome to the WorkflowFM PEW documentation. This guide shows you how to get started creating creating simulations using Proter and the key concepts involved.\nGet started ","link":"https://docs.workflowfm.com/pew/docs/","title":"Reference"},{"body":" A persistent execution engine for π-calculus workflows generated by the WorkflowFM process composition tools.\rPEW stands for Persistent Execution of Workflows.\nRead the DocsAPI DocumentationSource\nModules In addition to the core π-calculus model and execution engine, a list of additional modules are provided:\npew-mongo: Additional executor that stores the state in a MongoDB database. pew-kafka: Additional executor that stores the state and open process calls in Kafka topics, yielding a fully persistent/completely stateless execution. pew-simulator: Integration with Proter, an expressive, asynchronous process simulator. skiexample: Deployment of an example ski purchasing workflow documented in this paper. Authors Maintainer Petros Papapanagiotou - - - Contributors A big thank you to the following contributors in order of appearance:\nJames Vaughan Filip Smola Groups \u0026amp; Organizations Artificial Intelligence Modelling Lab\rArtificial Intelligence and its Applications Institute\rSchool of Informatics, University of Edinburgh\rLicense Distributed under the Apache 2.0 license. See LICENSE for more information.\nCopyright © 2019-2021 The University of Edinburgh and contributors\n","link":"https://docs.workflowfm.com/pew/","title":"WorkflowFM PEW"}]